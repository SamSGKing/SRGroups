# Input:: Any integer in the range [0,31], which denotes the degree of the regular rooted tree being assessed. If the input is 0 or 1, the degree is chosen to be the lowest degree not stored.
# Output:: The file containing all self-replicating groups of the rooted k-tree at the lowest level not stored.
InstallGlobalFunction(SRGroupFile, function(arg)
local fNew, dirData, k, i, x, dataContents, list2, deg, lev, y, fExtensions, GroupList, entryPoint, breakPoint, fBreakPointCheck, GroupList2, unsortedList1, unsortedList2, sortedlist, PrevPosList, N, M, Identicals, z , w, total, Vertices, I, fLevelAboveSingle, PrevGroupList, newgrouplist, m, fSingleGroup, fCumulative, fVariables, fLevelAboveCumulative, reEntry, initialz, initialx, totaltemp, kk, totalsrs, reEntrychecker, M, y, z, sortedList1, unsortedList1, repeats, dirTempFiles, fNewAbove, breakPointCheckExist;

# 0. Create directories to be used (dirData: storage of final group files, dirTempFiles: storage of temporary files).
dirData:=DirectoriesPackageLibrary("SRGroups", "data");
dirTempFiles:=DirectoriesPackageLibrary("SRGroups", "data/temp_files");
dataContents:=DirectoryContents(dirData[1]); # Creates a list of strings with names of the files/folders stored in dirData.

# 1. First check if the input argument is 0 or 1. If so, the tree level is automatically set to 1.
if arg[1]=0 or arg[1]=1 then
	# 1.1. Find the last file with "sr_" in the prefix of the filename, and store it in list2.
	#################### Fix #####################
	totalsrs:=0;
	for k in [1..Length(dataContents)] do
		if StartsWith(dataContents[k],"sr_") then
			Add(list2,dataContents[k]);
		fi;
	od;
	k:=list2[Length(list2)]; # The last entry in list2 will have the highest degree filename string which is consecutive from 2.
	i:=SplitString(k, ".", "_");
	# 1.1.1. Set the degree=deg to be 1 higher than the highest degree stored.
	deg:=EvalString(i[2])+1;
	
	# 1.2. Create required filenames.
	fNew:=Filename(dirData[1], Concatenation(i[1], "_", String(deg), "_1.grp"));
	fSingleGroup:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_1_indiv.grp"));
	fCumulative:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_1_full.grp"));
	fVariables:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_1_var.grp"));
	# 1.2.1. Check if the group files have already been partially created (re-entry condition). If so, read these files to continue from the previous save-point.
	if IsExistingFile(fCumulative) and IsExistingFile(fVariables) then
			reEntry:=true;
			reEntrychecker:=true;
			Read(fVariables);
			initialx:=EvalString("varArg1");
	else
		reEntry:=false;
		reEntrychecker:=false;
		initialx:=1;
	fi;
	
	# 1.3. Evaluate all transitive groups of the degree=deg and store their information.
	# Formatting of the group information is also completed here. For degree>1, this is done separately. See any "sr_deg_lev.grp" file for how this formatting is done.
	GroupList:=[];
	for x in [initialx..NrTransitiveGroups(deg)] do
		# 1.3.1. Create entries containing individual group information.
		GroupList[x]:=[];
		GroupList[x][1]:=ShallowCopy(TRANSGrp(deg,x));
		Remove(GroupList[x][1],Length(GroupList[x][1]));
		GroupList[x][2]:=Concatenation("\"SRGroup(",String(deg),",1,",String(x),")\"");
		GroupList[x][3]:="\"emptyset\"";
		GroupList[x][4]:="[\"the classes it extends to\"]";
		# 1.3.2. Print all individual group information (in correct format) to "temp_deg_1_indiv.grp".
		if not x=1 then
			PrintTo(fSingleGroup,Concatenation("\n\n\t[\n\t\t",String(GroupList[x][1])));
		else
			PrintTo(fSingleGroup,Concatenation("\n\t[\n\t\t",String(GroupList[x][1])));
		fi;
		AppendTo(fSingleGroup,",\n\t\t",GroupList[x][2]);
		AppendTo(fSingleGroup,",\n\t\t",GroupList[x][3]);
		if not x=NrTransitiveGroups(deg) then
			AppendTo(fSingleGroup,",\n\t\t",GroupList[x][4],"\n\t],");
		else
			AppendTo(fSingleGroup,",\n\t\t",GroupList[x][4],"\n\t]");
		fi;
		if not IsExistingFile(fCumulative) then
			PrintTo(fCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level 1 ##\n\nBindGlobal(\"sr_",String(deg),"_1\",\n[")); #################### Fix #####################
		fi;
		# 1.3.3. Print formatted individual group information to "temp_deg_1_full.grp" and save this point.
		AppendTo(fCumulative,StringFile(fSingleGroup));
		PrintTo(fVariables,EnString(x)); # Save-point
	od;
	AppendTo(fCumulative,"\n]);");
	
	# 1.4. Print all group information to final "sr_deg_1.grp" file, remove all associated temporary files, and unbind all residual variables.
	PrintTo(fNew, StringFile(fCumulative));
	RemoveFile(fSingleGroup);
	RemoveFile(fCumulative);
	RemoveFile(fVariables);
	if reEntrychecker then
		Unleash("varArg1");
	fi;
	
# 2. Case where the input argument is in [2,32].
else 
	# 2.1. Set the degree to be the input argument.
	deg:=arg[1];
	
	# 2.2. Finding the level to begin. If an element of list begins with "sr_arg[1]_", then store it as our value of k. Each time we find another value in list that begins with the same string, overwrite k as the list is sorted in an increasing sequence so naturally it will store the greatest value of k last.
	i:=1;
	k:=0;
	while i < Length(dataContents)+1 do
		if StartsWith(dataContents[i], Concatenation("sr_", String(deg))) then
			k:=dataContents[i];
		fi;
		i:=i+1;
	od;
	if k=0 then 
		lev:=1;
	else
		i:=SplitString(k, ".", "_");
		lev:=EvalString(i[3])+1;
	fi;
	
	# 2.3. Create required filenames.
	fNew:=Filename(dirData[1], Concatenation("sr_", String(deg), "_", String(lev), ".grp"));
	fNewAbove:=Filename(dirData[1],Concatenation("sr_", String(deg), "_", String(lev-1), ".grp"));
	fExtensions:=Filename(dirTempFiles[1], Concatenation("temp_", String(deg), "_", String(lev), ".grp"));
	fSingleGroup:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_indiv.grp"));
	fCumulative:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_full.grp"));
	fVariables:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_var.grp"));
	breakPointCheckExist:=false;
	
	# 2.4. Level 1 case.
	if lev=1 then
		# 2.4.1. Check if the group files have already been partially created (re-entry condition). If so, read these files to continue from the previous save point.
		if IsExistingFile(fCumulative) and IsExistingFile(fVariables) then
			reEntry:=true;
			reEntrychecker:=true;
			Read(fVariables);
			initialx:=EvalString("varArg1");
		else
			reEntry:=false;
			reEntrychecker:=false;
			initialx:=1;
		fi;
		
		# 2.4.2. Evaluate all transitive groups of the degree=deg and store their information.
		# Formatting of the group information is also completed here. For degree>1, this is done separately. See any "sr_deg_lev.grp" file for how this formatting is done.
		GroupList:=[];
		for x in [initialx..NrTransitiveGroups(deg)] do
			# 2.4.2.1. Create entries containing individual group information.
			GroupList[x]:=[];
			GroupList[x][1]:=ShallowCopy(TRANSGrp(deg,x));
			Remove(GroupList[x][1],Length(GroupList[x][1]));
			GroupList[x][2]:=Concatenation("\"SRGroup(",String(deg),",1,",String(x),")\"");
			GroupList[x][3]:="\"emptyset\"";
			GroupList[x][4]:="[\"the classes it extends to\"]";
			# 2.4.2.2. Print all individual group information (in correct format) to "temp_deg_1_indiv.grp".
			if not x=1 then
				PrintTo(fSingleGroup,Concatenation("\n\n\t[\n\t\t",String(GroupList[x][1])));
			else
				PrintTo(fSingleGroup,Concatenation("\n\t[\n\t\t",String(GroupList[x][1])));
			fi;
			AppendTo(fSingleGroup,",\n\t\t",GroupList[x][2]);
			AppendTo(fSingleGroup,",\n\t\t",GroupList[x][3]);
			if not x=NrTransitiveGroups(deg) then
				AppendTo(fSingleGroup,",\n\t\t",GroupList[x][4],"\n\t],");
			else
				AppendTo(fSingleGroup,",\n\t\t",GroupList[x][4],"\n\t]");
			fi;
			if not IsExistingFile(fCumulative) then
				PrintTo(fCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level 1 ##\n\nBindGlobal(\"sr_",String(deg),"_1\",\n["));
			fi;
			# 2.4.2.3. Print formatted individual group information to "temp_deg_1_full.grp" and save this point.
			AppendTo(fCumulative,StringFile(fSingleGroup));
			PrintTo(fVariables,EnString(x)); # Save-point
		od;
		
	# 2.5. Level>1 case.
	else
		# 2.5.1. Check whether some (or all) groups have already been extended (stored in "temp_deg_lev.grp") and continue from this point.
		entryPoint:=1;
		if IsExistingFile(fExtensions) then
			# 2.5.1.1. To count the number of stored variables containing the conjugacy class representatives, create a file "temp_deg_lev_check.grp".
			Read(fExtensions);
			fBreakPointCheck:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_check.grp"));
			breakPointCheckExist:=true;
			breakPoint:=0;
			while breakPoint=entryPoint-1 do
				breakPoint:=entryPoint;
				# 2.5.1.2. Print a statement to this file which declares a new variable called newEntryPoint, that increments if the variable temp_deg_lev-1_initial_proj exists.
				PrintTo(fBreakPointCheck,Concatenation("newEntryPoint:=",String(entryPoint),";\n\nif IsBound(temp_",String(deg),"_",String(lev-1),"_",String(entryPoint),"_proj) then\n\tinitial1:=newEntryPoint+1;\nfi;"));
				Read(fBreakPointCheck);
				# 2.5.1.3. The variable entryPoint is then incremented by setting its new value to newEntryPoint, and loops only if this value increases.
				entryPoint:=EvalString("newEntryPoint");
				if breakPoint=entryPoint-1 then
					MakeReadWriteGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(breakPoint),"_proj"));
					UnbindGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(breakPoint),"_proj"));
				fi;
				# 2.5.1.4. Unbind residual variable newEntryPoint.
				UnbindGlobal("newEntryPoint");
				# 2.5.1.5. The loop won't repeat once it finds an unbound temp_deg_lev-1_initial_proj variable.
			od;
		fi;
		
		# 2.5.2. Extend each group on level lev-1 to all conjugacy class representatives and store their generators.
		list2:=[];
		if entryPoint<=Length(SRGroup(deg,lev-1)) then
			for x in [entryPoint..Length(SRGroup(deg,lev-1))] do
				GroupList:=ConjugacyClassRepsSelfReplicatingSubgroupsWithProjection(deg, lev, Group(SRGroup(deg, lev-1, x)[1]));
				if x=1 then
					AppendTo(fExtensions,Concatenation("BindGlobal(\"temp_",String(deg),"_",String(lev-1),"_",String(x),"_proj\",\n["));
				else
					AppendTo(fExtensions,Concatenation("\n\nBindGlobal(\"temp_",String(deg),"_",String(lev-1),"_",String(x),"_proj\",\n["));
				fi;
				for y in [1..Length(GroupList)] do
					list2[y]:=GeneratorsOfGroup(GroupList[y]);
					if y=Length(GroupList) then
						AppendTo(fExtensions,Concatenation("\n\t",String(list2[y]),"\n]);"));
					else
						AppendTo(fExtensions,Concatenation("\n\t",String(list2[y]),","));
					fi;
				od;
			od;
		fi;
		
		# 
		fLevelAboveSingle:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_above_indiv.grp"));
		fLevelAboveCumulative:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_above.grp"));
		GroupList2:=[];
		if lev=2 then
			Read(fExtensions);
			if IsExistingFile(fCumulative) and IsExistingFile(fVariables) then
				reEntry:=true;
				reEntrychecker:=true;
				Read(fVariables);
				initialz:=EvalString("varArg1");
				newgrouplist:=[];
				repeats:=EvalString("varArg2");
				sortedList1:=EvalString("varArg3");
				unsortedList1:=EvalString("varArg4");
				w:=EvalString("varArg5");
				I:=EvalString("varArg6");
				M:=EvalString("varArg7");
				y:=EvalString("varArg8");
				PrevGroupList:=SRGroup(deg,lev-1);
				PrevPosList:=EvalString("varArg9");
				Vertices:=EvalString("varArg10");
				totaltemp:=0;
				if y>1 then
					for k in [1..y-1] do
					MakeReadWriteGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(PrevPosList[k]),"_proj"));
					UnbindGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(PrevPosList[k]),"_proj"));
					od;
				fi;
			else
				reEntry:=false;
				reEntrychecker:=false;
				unsortedList1:=[];
				sortedList1:=[];
				PrevPosList:=[];
				PrevGroupList:=SRGroup(deg,lev-1);
				newgrouplist:=[];
				for x in [1..Length(SRGroup(deg, lev-1))] do
					unsortedList1[x]:=Length(EvalString(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(x),"_proj")));
				od;
				sortedList1:=SortedList(unsortedList1);
				y:=1;
				M:=1;
				I:=1;
				initialz:=1;
				Vertices:=Length(PrevGroupList);
			fi;
			while y<=Length(SRGroup(deg, lev-1))do
				repeats:=Positions(unsortedList1, sortedList1[y]);
				for z in [initialz..Length(repeats)] do
					if not reEntry then
						PrevPosList[y]:=repeats[z];
						w:=1;
					fi;
					while w<=sortedList1[y] do
						GroupList2[M]:=[];
						GroupList2[M][1]:=EvalString(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(PrevPosList[y]),"_proj"))[w];
						GroupList2[M][2]:=Concatenation("\"SRGroup(",String(deg),",",String(lev),",",String(M),")\"");
						GroupList2[M][3]:=Concatenation("\"SRGroup(",String(deg),",",String(lev-1),",",String(y),")\"");
						GroupList2[M][4]:="[\"the classes it extends to\"]";
						if not M=1 then
							PrintTo(fSingleGroup,Concatenation("\n\n\t[\n\t\t",String(GroupList2[M][1])));
						else
							PrintTo(fSingleGroup,Concatenation("\n\t[\n\t\t",String(GroupList2[M][1])));
						fi;
						AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][2]);
						AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][3]);
						if not M=Sum(unsortedList1) then
							AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][4],"\n\t],");
						else
							AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][4],"\n\t]");
						fi;
						if not IsExistingFile(fCumulative) then
							PrintTo(fCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level", " ", String(lev), "##\n\nBindGlobal(\"sr_",String(deg),"_",String(lev),"\",\n["));
						fi;
						AppendTo(fCumulative,StringFile(fSingleGroup));
						PrintTo(fVariables,EnString(z, repeats, sortedList1, unsortedList1, w, I, M, y, PrevPosList, Vertices));
						if reEntry then
							reEntry:=false;
							initialz:=1;
						fi;
						w:=w+1;
						M:=M+1;
					od;
					if not I=M then
						newgrouplist[y]:=PrevGroupList[PrevPosList[y]];
						newgrouplist[y][2]:=String(Concatenation("\"SRGroup(", String(deg), ",", String(lev-1), ",", String(y), ")\""));
						PrintTo(fLevelAboveSingle, "\n\t", "[");
						AppendTo(fLevelAboveSingle, "\n\t\t", newgrouplist[y][1], ",");
						AppendTo(fLevelAboveSingle, "\n\t\t", "", newgrouplist[y][2], ",");
						AppendTo(fLevelAboveSingle, "\n\t\t", "\"", newgrouplist[y][3], "\",");
						for m in [1..sortedList1[y]] do
							newgrouplist[y][4]:=Concatenation("\"SRGroup(",String(deg),",",String(lev),",",String(I),")\"");
							if sortedList1[y]=1 then
								AppendTo(fLevelAboveSingle,"\n\t\t", "[", newgrouplist[y][4], "]\n\t]");
							elif m=1 then
								AppendTo(fLevelAboveSingle, "\n\t\t", "[", newgrouplist[y][4], ",");
							elif m=sortedList1[y] then
								AppendTo(fLevelAboveSingle, "\n\t\t", newgrouplist[y][4], "]\n\t]");
							else 
								AppendTo(fLevelAboveSingle, "\n\t\t", newgrouplist[y][4], ",");
							fi;
							I:=I+1;
						od;
						MakeReadWriteGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(PrevPosList[y]),"_proj"));
						UnbindGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(PrevPosList[y]),"_proj"));
						Vertices:=Vertices-1;
						if not IsExistingFile(fLevelAboveCumulative) then
							PrintTo(fLevelAboveCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level", " ", String(lev-1), "##\n\nBindGlobal(\"sr_",String(deg),"_",String(lev-1),"\",\n["));
						fi;
						if Vertices = 0 then
							AppendTo(fLevelAboveCumulative,StringFile(fLevelAboveSingle),"\n]);");
						else
							AppendTo(fLevelAboveCumulative,StringFile(fLevelAboveSingle),",\n");
						fi;
						PrintTo(fVariables,EnString(z, repeats, sortedList1, unsortedList1, w, I, M, y, PrevPosList, Vertices));
						if reEntry then
							reEntry:=false;
							initialz:=1;
						fi;
					fi;
					if reEntry then
						reEntry:=false;
						initialz:=1;
					fi;
					y:=y+1;
				od;
			od;
		else 
			Read(fExtensions);
			if IsExistingFile(fCumulative) and IsExistingFile(fVariables) then
				reEntry:=true;
				reEntrychecker:=true;
				Read(fVariables);
				initialx:=EvalString("varArg1");
				initialz:=EvalString("varArg2");
				newgrouplist:=[];
				sortedlist:=EvalString("varArg3");
				total:=EvalString("varArg4");
				unsortedList1:=EvalString("varArg5");
				unsortedList2:=EvalString("varArg6");
				y:=EvalString("varArg7");
				w:=EvalString("varArg8");
				I:=EvalString("varArg9");
				M:=EvalString("varArg10");
				N:=EvalString("varArg11");
				Identicals:=EvalString("varArg12");
				PrevGroupList:=SRGroup(deg,lev-1);
				PrevPosList:=EvalString("varArg13");
				Vertices:=EvalString("varArg14");
				totaltemp:=0;
				for x in [1..initialx] do
					if x=initialx then
						for k in [1..y-1] do
							MakeReadWriteGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(total+PrevPosList[x][k]),"_proj"));
							UnbindGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(total+PrevPosList[x][k]),"_proj"));
						od;
					else
						if x>1 then
							for kk in [1..x-1] do
								totaltemp:=totaltemp+Length(unsortedList2[kk]);
							od;
						fi;
						for k in [1..Length(unsortedList2[x])] do
							MakeReadWriteGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(totaltemp+PrevPosList[x][k]),"_proj"));
							UnbindGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(totaltemp+PrevPosList[x][k]),"_proj"));
						od;
					fi;
				od;
			else
				reEntry:=false;
				reEntrychecker:=false;
				unsortedList1:=[];
				for x in [1..Length(SRGroup(deg,lev-1))] do
					unsortedList1[x]:=Length(EvalString(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(x),"_proj")));
				od;
				unsortedList2:=[];
				sortedlist:=[];
				PrevPosList:=[];
				PrevGroupList:=SRGroup(deg,lev-1);
				newgrouplist:=[];
				Vertices:=Length(PrevGroupList);
				total:=0;
				N:=1;
				M:=1;
				I:=1;
				J:=1;
				initialx:=1;
				initialz:=1;
			fi;
			for x in [initialx..Length(SRGroup(deg,lev-2))] do
				newgrouplist[x]:=[];
				if not reEntry then
					unsortedList2[x]:=[];
					sortedlist[x]:=[];
					PrevPosList[x]:=[];
					if x>1 then
						total:=total+Length(SRGroup(deg,lev-1,0,x-1));
					fi;
					for y in [1..Length(SRGroup(deg,lev-1,0,x))] do
						unsortedList2[x][y]:=unsortedList1[N];
						N:=N+1;
					od;
					y:=1;
					sortedlist[x]:=SortedList(unsortedList2[x]);
				fi;
				while y<=Length(SRGroup(deg,lev-1,0,x)) do
					if not reEntry then
						Identicals:=Positions(unsortedList2[x],sortedlist[x][y]);
					fi;
					for z in [initialz..Length(Identicals)] do
						if not reEntry then
							PrevPosList[x][y]:=Identicals[z];
							w:=1;
						fi;
						while w<=sortedlist[x][y] do
							GroupList2[M]:=[];
							GroupList2[M][1]:=EvalString(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(total+PrevPosList[x][y]),"_proj"))[w];
							GroupList2[M][2]:=Concatenation("\"SRGroup(",String(deg),",",String(lev),",",String(M),")\"");
							GroupList2[M][3]:=Concatenation("\"SRGroup(",String(deg),",",String(lev-1),",",String(total+y),")\"");
							GroupList2[M][4]:="[\"the classes it extends to\"]";
							if not M=1 then
								PrintTo(fSingleGroup,Concatenation("\n\n\t[\n\t\t",String(GroupList2[M][1])));
							else
								PrintTo(fSingleGroup,Concatenation("\n\t[\n\t\t",String(GroupList2[M][1])));
							fi;
							AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][2]);
							AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][3]);
							if not M=Sum(unsortedList1) then
								AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][4],"\n\t],");
							else
								AppendTo(fSingleGroup,",\n\t\t",GroupList2[M][4],"\n\t]");
							fi;
							if not IsExistingFile(fCumulative) then
								PrintTo(fCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level", " ", String(lev), "##\n\nBindGlobal(\"sr_",String(deg),"_",String(lev),"\",\n["));
							fi;
							AppendTo(fCumulative,StringFile(fSingleGroup));
							PrintTo(fVariables,EnString(x, z, sortedlist, total, unsortedList1, unsortedList2, y, w, I, M, N, Identicals, PrevPosList, Vertices));
							if reEntry then
								reEntry:=false;
								initialz:=1;
							fi;
							w:=w+1;
							M:=M+1;
						od;
						if not I=M then
							newgrouplist[x][y]:=PrevGroupList[total+PrevPosList[x][y]];
							newgrouplist[x][y][2]:=String(Concatenation("\"SRGroup(", String(deg), ",", String(lev-1), ",", String(total+y), ")\""));
							PrintTo(fLevelAboveSingle, "\n\t", "[");
							AppendTo(fLevelAboveSingle, "\n\t\t", newgrouplist[x][y][1], ",");
							AppendTo(fLevelAboveSingle, "\n\t\t", "", newgrouplist[x][y][2], ",");
							AppendTo(fLevelAboveSingle, "\n\t\t", "\"", newgrouplist[x][y][3], "\",");
							for m in [1..sortedlist[x][y]] do
								newgrouplist[x][y][4]:=Concatenation("\"SRGroup(",String(deg),",",String(lev),",",String(I),")\"");
								if sortedlist[x][y]=1 then
									AppendTo(fLevelAboveSingle,"\n\t\t", "[", newgrouplist[x][y][4], "]\n\t]");
								elif m=1 then
									AppendTo(fLevelAboveSingle, "\n\t\t", "[", newgrouplist[x][y][4], ",");
								elif m=sortedlist[x][y] then
									AppendTo(fLevelAboveSingle, "\n\t\t", newgrouplist[x][y][4], "]\n\t]");
								else 
									AppendTo(fLevelAboveSingle, "\n\t\t", newgrouplist[x][y][4], ",");
								fi;
								I:=I+1;
							od;
							MakeReadWriteGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(total+PrevPosList[x][y]),"_proj"));
							UnbindGlobal(Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(total+PrevPosList[x][y]),"_proj"));
							Vertices:=Vertices-1;
							if not IsExistingFile(fLevelAboveCumulative) then
								PrintTo(fLevelAboveCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level", " ", String(lev-1), "##\n\nBindGlobal(\"sr_",String(deg),"_",String(lev-1),"\",\n["));
							fi;
							if Vertices = 0 then
								AppendTo(fLevelAboveCumulative,StringFile(fLevelAboveSingle),"\n]);");
							else
								AppendTo(fLevelAboveCumulative,StringFile(fLevelAboveSingle),",\n");
							fi;
							PrintTo(fVariables,EnString(x, z, sortedlist, total, unsortedList1, unsortedList2, y, w, I, M, N, Identicals, PrevPosList, Vertices));
							if reEntry then
								reEntry:=false;
								initialz:=1;
							fi;
						fi;
						if reEntry then
							reEntry:=false;
							initialz:=1;
						fi;
						y:=y+1;
					od;
				od;
			od;
		fi;
	fi;
	AppendTo(fCumulative,"\n]);");
	
	# _._. Print all group information to final sr_deg_lev.grp file, remove all associated temporary files, and unbind all residual variables.
	PrintTo(fNew,StringFile(fCumulative));
	RemoveFile(fExtensions);
	RemoveFile(fSingleGroup);
	RemoveFile(fCumulative);
	RemoveFile(fVariables);
	if reEntrychecker and lev>2 then
		Unleash("varArg1", "varArg2", "varArg3", "varArg4", "varArg5", "varArg6", "varArg7", "varArg8", "varArg9", "varArg10", "varArg11", "varArg12", "varArg13", "varArg14");
	elif reEntrychecker and lev=2 then
		Unleash("varArg1", "varArg2", "varArg3", "varArg4", "varArg5", "varArg6", "varArg7", "varArg8", "varArg9", "varArg10");
	elif reEntrychecker and lev=1 then
		Unleash("varArg1");
	fi;
	if lev>1 then
		PrintTo(fNewAbove,StringFile(fLevelAboveCumulative));
		if breakPointCheckExist then
			RemoveFile(fBreakPointCheck);
		fi;
		RemoveFile(fLevelAboveSingle);
		RemoveFile(fLevelAboveCumulative);
	fi;
fi;
return;
end);