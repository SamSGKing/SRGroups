InstallGlobalFunction(FormatSRFile, function(deg,lev)
local pr, fSingleGroup, fCumulative, numGroupsAbove, numProj, k, groupInfo, projBelow, prBelow, aboveCount, j, fNew, dirData, dirTempFiles;

dirData:=DirectoriesPackageLibrary("SRGroups", "data");
dirTempFiles:=DirectoriesPackageLibrary("SRGroups", "data/temp_files");
pr:=Projection(AutT(deg,lev));
prBelow:=Projection(AutT(deg,lev+1));
fSingleGroup:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_indiv.grp"));
fCumulative:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_full.grp"));
fNew:=Filename(dirData[1],Concatenation("sr_",String(deg),"_",String(lev),".grp"));

if IsExistingFile(fVariables) then
	reEntry:=true;
	reEntryCheck:=true;
	Read(fVariables);
	if IsExistingFile(fNew) then
		numGroups:=EvalString("varArg1");
		projBelow:=EvalString("varArg2");
		gens:=EvalString("varArg3");
		numProj:=EvalString("varArg4");
		numGroupsAbove:=EvalString("varArg5");
		groupInfo:=EvalString("varArg6");
		aboveCount:=EvalString("varArg7");
	else
		numGroups:=EvalString("varArg1");
		k:=EvalString("varArg2");
		projBelow:=EvalString("varArg3");
		gens:=EvalString("varArg4");
		numProj:=EvalString("varArg5");
		numGroupsAbove:=EvalString("varArg6");
		gensAbove:=EvalString("varArg7");
		if k>numGroups then
			groupInfo:=EvalString("varArg8");
			aboveCount:=EvalString("varArg9");
		fi;
	fi;
else
	reEntry:=false;
	reEntryCheck:=false;
	numProj:=[];
	numGroups:=EvalString(SplitString(SplitString(SRGroup(deg,lev+1)[Length(SRGroup(deg,lev+1))][3],",")[3],")")[1]);
fi;

if IsExistingFile(fNew) then
	if not reEntry then
		for k in [1..numGroups] do
			projBelow[k]:=SRGroup(deg,lev+1,0,k);
			gens[k]:=GeneratorsOfGroup(Image(prBelow,Group(projBelow[k][1][1])));
		od;
		numGroupsAbove:=EvalString(SplitString(SplitString(SRGroup(deg,lev)[Length(SRGroup(deg,lev))][3],",")[3],")")[1]);
		for k in [1..numGroupsAbove] do
			if k>1 then
				numProj[k]:=numProj[k-1]+Length(SRGroup(deg,lev,0,k));
			else
				numProj[k]:=Length(SRGroup(deg,lev,0,k));
			fi;
		od;
	fi;
else
	fGens:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_gens.grp"));
	fGensAbove:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev-1),"_gens.grp"));
	fVariables:=Filename(dirTempFiles[1],Concatenation("temp_",String(deg),"_",String(lev),"_format_var.grp"));
	if not reEntry then
		currentGens:=[()];
		projBelow:=[];
		gens:=[];
		gensAbove:=[];
		numGroupsAbove:=0;
		if IsExistingFile(fGens) then
			Read(fGens);
		else
			gens:=[];
		fi;
	fi;
	while k<=numGroups do
		projBelow[k]:=SRGroup(deg,lev+1,0,k);
		if not (IsExistingFile(fGens) and reEntry) then
			gens[k]:=GeneratorsOfGroup(Image(prBelow,Group(projBelow[k][1][1])));
		fi;
		gensAboveTemp:=GeneratorsOfGroup(Image(pr,Group(gens[k])));
		if Group(gensAboveTemp)=Group(currentGens) then
			numProj[numGroupsAbove]:=numProj[numGroupsAbove]+1;
		else
			numGroupsAbove:=numGroupsAbove+1;
			gensAbove[numGroupsAbove]:=gensAboveTemp;
			currentGens:=gensAbove[numGroupsAbove];
			if k>1 then
				numProj[numGroupsAbove]:=numProj[numGroupsAbove-1]+1;
			else
				numProj[numGroupsAbove]:=1;
			fi;
			if k=1 then
				AppendTo(fGensAbove,",\n\t",gensAbove[numGroupsAbove]);
			else
				PrintTo(fGensAbove,"BindGlobal(\"gens\",\n[\n\t",gensAbove[numGroupsAbove]);
			fi;
		fi;
		if k=numGroups then
			AppendTo(fGensAbove,"\n]);");
		fi;
		k:=k+1;
		PrintTo(fVariables,StringVariables(numGroups,k,projBelow,gens,numProj,numGroupsAbove,gensAbove));
	od;
fi;

if not reEntry then
	groupInfo:=[];
	projBelow:=[];
	aboveCount:=1;
fi;

while m<=numGroups do
	groupInfo[m]:=[];
	groupInfo[m][1]:=gens[m];
	groupInfo[m][2]:=Concatenation("\"SRGroup(",String(deg),",",String(lev),",",String(m),")\"");
	PrintTo(fSingleGroup, "\n\t", "[");
	AppendTo(fSingleGroup, "\n\t\t", groupInfo[m][1], ",");
	AppendTo(fSingleGroup, "\n\t\t", groupInfo[m][2], ",");
	if m<=numProj[aboveCount] then
		groupInfo[m][3]:=Concatenation("\"SRGroup(",String(deg),",",String(lev-1),",",String(aboveCount),")\"");
	else
		aboveCount:=aboveCount+1;
		groupInfo[m][3]:=Concatenation("\"SRGroup(",String(deg),",",String(lev-1),",",String(aboveCount),")\"");
	fi;
	AppendTo(fSingleGroup, "\n\t\t", groupInfo[m][3], ",");
	groupInfo[m][4]:=[];
	for j in [1..Length(projBelow[m])] do
		groupInfo[m][4][j]:=projBelow[m][j][2];
		if Length(projBelow[m])=1 then
			AppendTo(fSingleGroup,"\n\t\t", "[\"", groupInfo[m][4][j], "\"]\n\t]");
		elif j=1 then
			AppendTo(fSingleGroup, "\n\t\t", "[\"", groupInfo[m][4][j], "\",");
		elif j=Length(projBelow[m]) then
			AppendTo(fSingleGroup, "\n\t\t\"", groupInfo[m][4][j], "\"]\n\t]");
		else 
			AppendTo(fSingleGroup, "\n\t\t\"", groupInfo[m][4][j], "\",");
		fi;
	od;
	if not IsExistingFile(fCumulative) then
	PrintTo(fCumulative, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level", " ", String(lev), "##\n\nBindGlobal(\"sr_",String(deg),"_",String(lev),"\",\n["));
	fi;
	if m=numGroups then
		AppendTo(fCumulative,StringFile(fSingleGroup),"\n]);");
	else
		AppendTo(fCumulative,StringFile(fSingleGroup),",\n");
	fi;
	m:=m+1;
	PrintTo(fVariables,StringVariables(k,m));
	if IsExistingFile(fNew) then
		PrintTo(fVariables,StringVariables(numGroups,projBelow,gens,numProj,numGroupsAbove,groupInfo,aboveCount));
	else
		PrintTo(fVariables,StringVariables(numGroups,k,projBelow,gens,numProj,numGroupsAbove,gensAbove,groupInfo,aboveCount));
	fi;
od;
if reEntry then
	if IsExistingFile(fNew) then
		UnleashVariables(varArg1,varArg2,varArg3,varArg4,varArg5,varArg6,varArg7,varArg8);
	else
		UnleashVariables(varArg1,varArg2,varArg3,varArg4,varArg5,varArg6,varArg7,varArg8,varArg9,varArg10);
	fi;
fi;
if IsBound(gens) then
	MakeReadWriteGlobal("gens");
	UnbindGlobal("gens");
fi;
# PrintTo(fNew,StringFile(fCumulative));


# if IsExistingFile(fGens) then
	# RemoveFile(fGens);
# fi;
# RemoveFile(fSingleGroup);
# RemoveFile(fCumulative);
# RemoveFile(fVariables);
return;
end);