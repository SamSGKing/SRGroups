#
# SRGroups: Self-replicating groups of regular rooted trees.
#
# Routines
#

# arg[1]:=degree
# arg[2]:=level
# arg[3]:=number
# arg[4]:=groups with same projection (arg[3]=0 is required)
# arg[5]:=position
InstallGlobalFunction(SRGroup,function(arg)
local dir, fnam, G, list, i, Gpos, temp;

dir:= DirectoriesPackageLibrary( "SRGroups", "data" );
if IsExistingFile(Filename( dir[1], Concatenation("sr_",String(arg[1]),"_",String(arg[2]),".grp"))) then
	fnam:=Filename( dir, Concatenation("sr_",String(arg[1]),"_",String(arg[2]),".grp"));
	Read(fnam);
else
	Print("These groups are not available (yet)!");
	return;
fi;

if (Length(arg)=3) and not (arg[3]=0) then
	G:=EvalString(Concatenation("sr_",String(arg[1]),"_",String(arg[2]),"[",String(arg[3]),"]"));
elif (Length(arg)=2) or (Length(arg)=3 and arg[3]=0) then
	G:=EvalString(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
elif (Length(arg)=4) and (arg[3]=0) then
	list:=EvalString(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
	Gpos:=1;
	G:=[];
	for i in [1..Length(list)] do
		if EndsWith(list[i][3],Concatenation(",",String(arg[4]),")")) then
			G[Gpos]:=list[i];
			Gpos:=Gpos+1;
		fi;
	od;	
elif (Length(arg)=5) and ((arg[4]=0) and (arg[3]=0)) then
	list:=EvalString(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
		Gpos:=1;
		G:=[];
		temp:=arg[5];
		for i in [1..Length(list)] do
			G[Gpos]:=list[i][temp];
			Gpos:=Gpos+1;
		od;
else
	Print("No method exists!");
	return;
fi;

MakeReadWriteGlobal(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
UnbindGlobal(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
return G;
end);

InstallGlobalFunction(CheckSRProjections,function(arg)
local dir, fnam, list1, list2, pr, i, G1, G2, check;

check:=0;
list1:=SRGroup(arg[1],arg[2],0,0,1);
list2:=SRGroup(arg[1],arg[2],0,0,3);
pr:=Projection(AutT(arg[1],arg[2]));
for i in [1..Length(list1)] do
	G1:=Image(pr,Group(list1[i]));
	G2:=Group(EvalString(list2[i])[1]);
	if not G1=G2 then
		Print("SRGroup(",String(arg[1]),",",String(arg[2]),")[",String(i),"]");
		check:=check+1;
	fi;
od;

if check=0 then
	Print("All groups project correctly.");
else
	Print(check,"groups did not project corrrectly.");
fi;

return;
end);

InstallGlobalFunction(SRGroupFile, function(arg)
local fName, dir, k, i, j, list1, list2, list3, deg, lev, SRG, cmnt, n, fNameTemp, GroupList, initial, previous, temp, tempFile;
	dir:=DirectoriesPackageLibrary("SRGroups", "data");
	if arg[1]=0 or arg[1]=1 then
		list1:=DirectoryContents("/proc/cygdrive/C/gap-4.11.0/pkg/SRGroups/data");
		k:=list1[Length(DirectoryContents("/proc/cygdrive/C/gap-4.11.0/pkg/SRGroups/data"))];
		i:=SplitString(k, ".", "_");
		deg:=EvalString(list1[2])+1;
		fName:=Filename(dir[1], Concatenation(list1[1], "_", String(deg), "_", String(1), ".grp"));
		# Need to work out how to add all the self-replicating groups on level 1 =: A
		#AppendTo(fName, SRG);
	else 
		deg:=arg[1];
		list1:=DirectoryContents("/proc/cygdrive/C/gap-4.11.0/pkg/SRGroups/data");
		#if an element of list begins with "sr_arg[1]_" then we are going to store it as our value of k. Each time we find another value in list that begins with the same string we will overwrite k as our list will be stored in an increasing sequence so naturally it will store the greatest value of k last. 
		i:=1;
		while i < Length(DirectoryContents("/proc/cygdrive/C/gap-4.11.0/pkg/SRGroups/data"))+1 do
			if StartsWith(list1[i], Concatenation("sr_", String(deg))) then
				k:=list1[i];
			fi;
			i:=i+1;
		od;
		i:=SplitString(k, ".", "_");
		lev:=EvalString(i[3])+1;
		fName:=Filename(dir, Concatenation(i[1], "_", String(deg), "_", String(lev), ".grp"));
		list2:=[];
		fNameTemp:=Filename(dir, Concatenation("temp", "_", String(deg), "_", String(lev), ".grp"));
		initial:=1;
		if IsExistingFile(fNameTemp) then
			Read(fNameTemp);
			tempFile:=Filename(dir,"temp.grp");
			previous:=0;
			while previous=initial-1 do
				previous:=initial;
				PrintTo(tempFile,Concatenation("initial1:=",String(initial),";\n\nif IsList(temp_",String(deg),"_",String(lev-1),"_",String(initial),"_proj) then\n\tinitial1:=initial1+1;\nfi;"));
				Read(tempFile);
				initial:=EvalString("initial1");
			od;
		fi;
		if initial<Length(SRGroup(deg,lev-1)) then
			for j in [initial..Length(SRGroup(deg,lev-1))] do
				GroupList:=ConjugacyClassRepsSelfReplicatingSubgroupsWithProjection(deg, lev, Group(SRGroup(deg, lev-1, j)[1]));
				if j=1 then
					AppendTo(fNameTemp,Concatenation("temp_",String(deg),"_",String(lev-1),"_",String(j),"_proj:=\n["));
				else
					AppendTo(fNameTemp,Concatenation("\n\ntemp_",String(deg),"_",String(lev-1),"_",String(j),"_proj:=\n["));
				fi;
				for n in [1..Length(GroupList)] do
					list2[n]:=GeneratorsOfGroup(GroupList[n]);
					if n=Length(GroupList) then
						AppendTo(fNameTemp,Concatenation("\n\t",String(list2[n]),"\n];"));
					else
						AppendTo(fNameTemp,Concatenation("\n\t",String(list2[n]),","));
					fi;
				od;
			od;
		fi;
		# AppendTo(fName, Concatenation("##This contains a list of the self-replicating groups on the rooted regular-", String(deg), " tree on level", " ", String(lev), "##"));
		# SRG:=[];
		# for j in [1..Length(list3)] do
			# SRG[j]:= [list3[j]];
		# od;
		# AppendTo(fName, SRG);
	fi;
return;
end);