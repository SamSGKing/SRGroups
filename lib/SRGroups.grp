#
# SRGroups: Self-replicating groups of regular rooted trees.
#
# Routines
#

# arg[1]:=degree
# arg[2]:=level
# arg[3]:=number
# arg[4]:=groups with same projection (arg[3]=0 is required)
# arg[5]:=position (arg[3]=0 and arg[4]=0 is required)
InstallGlobalFunction(SRGroup,function(arg)
local dir, fnam, G, list, i, Gpos, last, zeros;

zeros:=Positions(arg,0);
last:=0;
for i in [1..Length(arg)] do
	if not arg[i]=0 then
		last:=i;
	fi;
od;

dir:= DirectoriesPackageLibrary( "SRGroups", "data" );
if 1 in zeros then
	
elif 2 in zeros then
	
elif IsEmpty(arg) then
	
else
	if IsExistingFile(Filename( dir[1], Concatenation("sr_",String(arg[1]),"_",String(arg[2]),".grp"))) then
		fnam:=Filename( dir, Concatenation("sr_",String(arg[1]),"_",String(arg[2]),".grp"));
		Read(fnam);
		list:=EvalString(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
		MakeReadWriteGlobal(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
		UnbindGlobal(Concatenation("sr_",String(arg[1]),"_",String(arg[2])));
	else
		Print("These groups are not available (yet)!");
		return;
	fi;
fi;

if (Length(arg)>=3 and last=3) then
	G:=list[arg[3]];
elif (Length(arg)>=2 and last=2) then
	G:=list;
elif (Length(arg)>=4 and last=4 and 3 in zeros) then
	Gpos:=1;
	G:=[];
	for i in [1..Length(list)] do
		if EndsWith(list[i][3],Concatenation(",",String(arg[4]),")")) then
			G[Gpos]:=list[i];
			Gpos:=Gpos+1;
		fi;
	od;	
elif (Length(arg)>=5 and last=5 and 3 in zeros) then
		Gpos:=1;
		G:=[];
		if 4 in zeros then
			for i in [1..Length(list)] do
				G[Gpos]:=list[i][arg[5]];
				Gpos:=Gpos+1;
			od;
		else
			for i in [1..Length(list)] do
				if EndsWith(list[i][3],Concatenation(",",String(arg[4]),")")) then
					G[Gpos]:=list[i][arg[5]];
					Gpos:=Gpos+1;
				fi;
			od;
		fi;
else
	Print("No method exists!");
	return;
fi;

return G;
end);

InstallGlobalFunction(AllSRGroups,function(arg)
local inputArgs, deg, lev, num, proj, index;

inputArgs:=[];

if IsInt(Position(arg,Degree)) then
	deg:=arg[Position(arg,Degree)+1];
	Add(inputArgs,deg);
else
	Add(inputArgs,0);
fi;
if IsInt(Position(arg,Depth)) then
	lev:=arg[Position(arg,Depth)+1];
	Add(inputArgs,lev);
else
	Add(inputArgs,0);
fi;
if IsInt(Position(arg,Number)) then
	num:=arg[Position(arg,Number)+1];
	Add(inputArgs,num);
else
	Add(inputArgs,0);
fi;
if IsInt(Position(arg,Projection)) then
	proj:=arg[Position(arg,Projection)+1];
	Add(inputArgs,proj);
else
	Add(inputArgs,0);
fi;
if IsInt(Position(arg,Index)) then
	index:=arg[Position(arg,Index)+1];
	Add(inputArgs,index);
else
	Add(inputArgs,0);
fi;

return CallFuncList(SRGroup,inputArgs);
end);

InstallGlobalFunction(CheckSRProjections,function(arg)
local dir, fnam, list1, list2, pr, i, G1, G2, check;

check:=0;
list1:=SRGroup(arg[1],arg[2],0,0,1);
list2:=SRGroup(arg[1],arg[2],0,0,3);
pr:=Projection(AutT(arg[1],arg[2]));
for i in [1..Length(list1)] do
	G1:=Image(pr,Group(list1[i]));
	G2:=Group(EvalString(list2[i])[1]);
	if not G1=G2 then
		Print("SRGroup(",String(arg[1]),",",String(arg[2]),")[",String(i),"]\n");
		check:=check+1;
	fi;
od;

if check=0 then
	Print("All groups project correctly.");
else
	Print(check," groups did not project corrrectly.");
fi;

return;
end);

InstallGlobalFunction(StringVariables, function(arg)
local Superstring, i;

for i in [1..Length(arg)] do
	if i=1 then
		Superstring:=Concatenation("varArg",String(i),":=",String(arg[i]),";");
	else
		Superstring:=Concatenation(Superstring,"\nvarArg",String(i),":=",String(arg[i]),";");
	fi;
od;

return Superstring;
end);

InstallGlobalFunction(UnbindVariables, function(arg)
local k;

for k in [1..Length(arg)] do
	UnbindGlobal(arg[k]);
od;
end);