dir:= DirectoriesPackageLibrary( "SRGroups", "data" );
deg:=2;
lev:=3;

# Scenarios that need to be accounted for: #
	# 1. Mutliple missing files, i.e. lev exists and lev+m exists for some m > 0. 
		# a. This would require multiple projections from the larger files onto the created "smaller" files. 
		# i.e. lev+m projects to lev+(m-1) projects to lev+(m-2) and so on and so forth until lev is reached. 
		# b. The number of groups on level = lev+(m-1) is equal to EvalString(the final group of lev+m[3])
		# c. Then the projection mappings can be checked. 
	# 2. There is information missing from the fourth position of the projection file. 
		# a. This would require the information to be projected from the larger files (lev + m) back onto the "smaller" files all the way back until lev-1.
		# b. Then the projection maps would need to be checked. 


if IsExistingFile(Filename( dir[1], Concatenation("sr_",String(deg),"_",String(lev+1),".grp"))) and not IsExistingFile(Filename( dir[1], Concatenation("sr_",String(deg),"_",String(lev),".grp"))) then
	# Defining the files under and above the level that is missing, and creating the missing file. 
	fLevelUnder:=Filename(dir, Concatenation("sr_", String(deg), "_", String(lev-1), ".grp"));
	fLevelAbove:=Filename(dir, Concatenation("sr_", String(deg), "_", String(lev+1), ".grp"));
	fLevel:=Filename(dir, Concatenation("sr_", String(deg), "_", String(lev), ".grp"));
	
	# Reading the under and above files and unbinding the variables so their information can be accessed. 
	Read(fLevelUnder);
	MakeReadWriteGlobal(Concatenation("sr_", String(deg), "_", String(lev-1)));
	UnbindGlobal(Concatenation("sr_", String(deg), "_", String(lev-1)));
	Read(fLevelAbove);
	MakeReadWriteGlobal(Concatenation("sr_", String(deg), "_", String(lev+1)));
	UnbindGlobal(Concatenation("sr_", String(deg), "_", String(lev+1)));

	# Determining the numbers for each of the extensions from each of the groups in level=lev-1. This will make it easy to number the groups on level=lev. 
	totalGroupsLists:=[];
	for a in [1..Length(SRGroup(deg, lev-1, 0, 0, 4))] do
		totalGroupsLists[a]:=[];
		for b in [1..Length(SRGroup(deg,lev-1,0,0,4)[a])] do
			if a=1 then
				totalGroupsLists[a][b]:=b;
			else
				totalGroupsLists[a][b]:=b+totalGroupsLists[a-1][Length(totalGroupsLists[a-1])];
			fi;
		od;
	od;

	# Formatting the new file, fLevel by creating the locations for storing the group information. 
	groupInfo:=[];
	for grpCount in [1.. totalGroupsLists[Length(totalGroupsLists)][Length(totalGroupsLists[Length(totalGroupsLists)])] do 
		groupInfo[i]:=[];
		groupInfo[grpCount][1]:="[\"Generators to come\"],";
		# Setting the name of each grpCount group to be the associated extension from the level above
		groupInfo[grpCount][2]:=Concatenation("\"SRGroup(",String(deg),",",String(lev),",",String(grpCount),")\"");
		groupInfo[grpCount][3]:=Concatenation("\"SRGroup(", String(deg), ",", String(lev-1), ",", String(totalGroupsLists[]))
		groupInfo[grpCount][4]:="[\"the classes it extends to\"]";
	od;
	
	
	
fi;

# This is a comment

