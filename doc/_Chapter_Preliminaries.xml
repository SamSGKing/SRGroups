<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Preliminaries">
<Heading>Preliminaries</Heading>

 Introductory text. To do.
<Section Label="Chapter_Preliminaries_Section_Regular_rooted_tree_groups">
<Heading>Regular rooted tree groups</Heading>

<ManSection>
  <Filt Arg="G" Name="IsRegularRootedTreeGroup" Label="for IsPermGroup"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
 The argument of this category is any permutation group, <A>G</A>. Checks whether <A>G</A> is a regular rooted tree group.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="G" Name="RegularRootedTreeGroupDegree" Label="for IsRegularRootedTreeGroup"/>
 <Returns> The degree of <A>G</A>.
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RegularRootedTreeGroupDepth(AutT(2,3));
3
]]></Example>


<ManSection>
  <Attr Arg="G" Name="RegularRootedTreeGroupDepth" Label="for IsRegularRootedTreeGroup"/>
 <Returns> The depth of <A>G</A>.
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RegularRootedTreeGroupDegree(AutT(2,3));
2
]]></Example>


<ManSection>
  <Oper Arg="k,n,G" Name="RegularRootedTreeGroup" Label="for IsInt, IsInt, IsPermGroup"/>
 <Returns> The regular rooted tree group <A>G</A> as an object of the category <Ref Filt="IsRegularRootedTreeGroup"/>, with attributes <Ref Attr="RegularRootedTreeGroupDegree"/> and <Ref Attr="RegularRootedTreeGroupDepth"/>.
</Returns>
 <Description>
 The arguments of this operation are a regular rooted tree group, <A>G</A>, and its degree <A>k</A> and depth <A>n</A>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="k,n" Name="AutT" />
 <Returns> The regular rooted tree group <Math>\mathrm{Aut}(T_{k,n})</Math> as a permutation group of the <Math>k^{n}</Math> leaves of <Math>T_{k,n}</Math>.
 
</Returns>
 <Description>
 The arguments of this function are a degree <A>k</A> <Math>\in\mathbb{N}_{\ge 2}</Math> and a depth <A>n</A> <Math>\in\mathbb{N}</Math>.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> G:=AutT(2,2);
Group([ (1,2), (3,4), (1,3)(2,4) ])
gap> Size(G);
8
]]></Example>


</Section>


<Section Label="Chapter_Preliminaries_Section_Auxiliary_functions">
<Heading>Auxiliary functions</Heading>

<ManSection>
  <Func Arg="k,n,aut,i" Name="BelowAction" />
 <Returns> The restriction of <A>aut</A> to the subtree below the level 1 vertex <A>i</A>, as an element of <F>AutT(</F><A>k</A>,<A>n-1</A><F>)</F>.
 
</Returns>
 <Description>
 The arguments of this function are a degree, <A>k</A> <Math>\in\mathbb{N}_{\ge 2}</Math>, a depth, <A>n</A> <Math>\in\mathbb{N}</Math>, an element of <F>AutT(</F><A>k</A>,<A>n</A><F>)</F>, <A>aut</A>, and a level 1 vertex, <A>i</A> <Math>\in\{1,\cdots,k\}</Math>.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> BelowAction(2,2,(1,2)(3,4),2);
(1,2)
]]></Example>


<ManSection>
  <Func Arg="G, grouplist" Name="RemoveConjugates" />
 <Description>
 The arguments of this function are a group, <A>G</A>, and a list of groups, grouplist. For every group H1 in grouplist, this function removes all conjugate groups <Math>H2</Math> such that <Math>H2\in H1^G</Math>.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> 
]]></Example>


</Section>


</Chapter>

