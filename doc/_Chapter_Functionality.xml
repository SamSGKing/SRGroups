<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Functionality">
<Heading>Functionality</Heading>

<Section Label="Chapter_Functionality_Section_Methods">
<Heading>Methods</Heading>

<ManSection>
  <Filt Arg="G" Name="IsRegularRootedTreeGroup" Label="for IsPermGroup"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
 The argument of this category is any permutation group, <A>G</A>. Checks whether <A>G</A> is a regular rooted tree group.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="G" Name="RegularRootedTreeGroupDegree" Label="for IsRegularRootedTreeGroup"/>
 <Returns> The degree of <A>G</A>.
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RegularRootedTreeGroupDepth(AutT(2,3));
3
]]></Example>


<ManSection>
  <Attr Arg="G" Name="RegularRootedTreeGroupDepth" Label="for IsRegularRootedTreeGroup"/>
 <Returns> The depth of <A>G</A>.
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RegularRootedTreeGroupDegree(AutT(2,3));
2
]]></Example>


<ManSection>
  <Oper Arg="k,n,G" Name="RegularRootedTreeGroup" Label="for IsInt, IsInt, IsPermGroup"/>
 <Returns> The regular rooted tree group <A>G</A> as an object of the category <Ref Filt="IsRegularRootedTreeGroup"/>, with attributes <Ref Attr="RegularRootedTreeGroupDegree"/> and <Ref Attr="RegularRootedTreeGroupDepth"/>.
</Returns>
 <Description>
 The arguments of this operation are a regular rooted tree group, <A>G</A>, and its degree <A>k</A> and depth <A>n</A>.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="G" Name="IsSelfReplicating" Label="for IsRegularRootedTreeGroup"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
 The argument of this property is any regular rooted tree group, <A>G</A>. Tests whether <A>G</A> satisfies the self-replicating conditions.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> IsSelfReplicating(AutT(2,3));
true
]]></Example>


<ManSection>
  <Prop Arg="G" Name="HasSufficientRigidAutomorphisms" Label="for IsRegularRootedTreeGroup"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
 The argument of this property is any regular rooted tree group, <A>G</A>. Tests whether <A>G</A> has sufficient rigid automorphisms.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> HasSufficientRigidAutomorphisms(AutT(2,3));
true
]]></Example>


<ManSection>
  <Attr Arg="G" Name="ParentGroup" Label="for IsRegularRootedTreeGroup"/>
 <Returns> The image of <A>G</A> when projected onto the automorphism group of degree <A>k</A> and depth <A>n-1</A>.
 
 
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>, of degree <A>k</A> and depth <A>n</A>.
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> G:=AutT(2,3); H:=AutT(2,2);
Group([ (1,2), (3,4), (5,6), (7,8), (1,3)(2,4), (5,7)(6,8), (1,5)(2,6)(3,7)(4,8) ])
Group([ (1,2), (3,4), (1,3)(2,4) ])
gap> ParentGroup(G);
Group([ (1,2), (1,3)(2,4), (3,4) ])
gap> H=last;
true
]]></Example>


<ManSection>
  <Attr Arg="G" Name="MaximalExtension" Label="for IsRegularRootedTreeGroup"/>
 <Returns> The maximal extension of <A>G</A>, <A>M(G)</A>, that is a subgroup of the automorphism group of degree <A>k</A> and depth <A>n+1</A>.
 
 
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>, of degree <A>k</A> and depth <A>n</A>.
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> G:=AutT(2,3); H:=AutT(2,4);
Group([ (1,2), (3,4), (5,6), (7,8), (1,3)(2,4), (5,7)(6,8), (1,5)(2,6)(3,7)(4,8) ])
<permutation group of size 32768 with 15 generators>
gap> MaximalExtension(G);
<permutation group with 11 generators>
gap> H=last;
true
]]></Example>


<ManSection>
  <Attr Arg="G" Name="RepresentativeWithSufficientRigidAutomorphisms" Label="for IsRegularRootedTreeGroup"/>
 <Returns> A conjugate of <A>G</A> with sufficient rigid automorphisms.
 
 
</Returns>
 <Description>
 The argument of this attribute is any regular rooted tree group, <A>G</A>. 
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap>
]]></Example>


</Section>


<Section Label="Chapter_Functionality_Section_Library_Functions">
<Heading>Library Functions</Heading>

<ManSection>
  <Func Arg="Input1, val1, Input2, val2, ..." Name="AllSRGroups" />
 <Returns> All of the self-replicating group(s) stored as objects satisfying all of the provided input arguments.
</Returns>
 <Description>
 Main library search function. Has several possible input arguments such as <A>Degree</A>, <A>Level</A> (or <A>Depth</A>), <A>Number</A>, <A>Projection</A>, <A>Subgroup</A>, <A>Size</A>, <A>NumberOfGenerators</A>, and <A>IsAbelian</A>. Order of the inputs do not matter.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AllSRGroups(Degree, 2, Level, 4, IsAbelian, true);
[ SRGroup(2,4,2), SRGroup(2,4,9), SRGroup(2,4,12), SRGroup(2,4,14) ]
gap> Size(last[1]);
16
gap> AllSRGroups(Degree, 2, Level, 4, NumberOfGenerators, 4);
[ SRGroup(2,4,11), SRGroup(2,4,12), SRGroup(2,4,16), SRGroup(2,4,20), SRGroup(2,4,23), SRGroup(2,4,24),
 SRGroup(2,4,25), SRGroup(2,4,26), SRGroup(2,4,40), SRGroup(2,4,43), SRGroup(2,4,46), SRGroup(2,4,47),
 SRGroup(2,4,50), SRGroup(2,4,66), SRGroup(2,4,70), SRGroup(2,4,71), SRGroup(2,4,72), SRGroup(2,4,73),
 SRGroup(2,4,74), SRGroup(2,4,75), SRGroup(2,4,76), SRGroup(2,4,84), SRGroup(2,4,90), SRGroup(2,4,91),
 SRGroup(2,4,93), SRGroup(2,4,95), SRGroup(2,4,97), SRGroup(2,4,102), SRGroup(2,4,108) ]
]]></Example>


<ManSection>
  <Func Arg="Input1, val1, Input2, val2, ..." Name="AllSRGroupsInfo" />
 <Returns> Information about the self-replicating group(s) satisfying all of the provided input arguments in list form: [<A>Generators</A>, <A>Name</A>, <A>Parent Name</A>, <A>Children Name(s)</A>]. If the <A>Position</A> input is provided, only the corresponding index of this list is returned.
</Returns>
 <Description>
 Inputs work the same as the main library search function <Ref Func="AllSRGroups"/>, with one additional input: <A>Position</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AllSRGroupsInfo(Degree, 2, Level, 3, IsAbelian, true);
[ [ [ (1,5,4,8,2,6,3,7), (1,4,2,3)(5,8,6,7), (1,2)(3,4)(5,6)(7,8) ], "SRGroup(2,3,1)", "SRGroup(2,2,1)", [ "SRGroup(2,4,1)", "SRGroup(2,4,2)" ] ],
[ [ (1,5,2,6)(3,7,4,8), (1,3)(2,4)(5,7)(6,8), (1,2)(3,4)(5,6)(7,8) ], "SRGroup(2,3,4)", "SRGroup(2,2,2)", [ "SRGroup(2,4,8)", "SRGroup(2,4,9)", "SRGroup(2,4,10)" ] ], 
[ [ (1,3)(2,4)(5,7)(6,8), (1,5)(2,6)(3,7)(4,8), (1,2)(3,4)(5,6)(7,8) ], "SRGroup(2,3,5)", "SRGroup(2,2,2)", [ "SRGroup(2,4,11)", "SRGroup(2,4,12)", "SRGroup(2,4,13)", "SRGroup(2,4,14)", "SRGroup(2,4,15)" ] ] ]
gap> AllSRGroupsInfo(Degree, 2, Level, 3, IsAbelian, true, Position, 1);
[ [ (1,5,4,8,2,6,3,7), (1,4,2,3)(5,8,6,7), (1,2)(3,4)(5,6)(7,8) ],
  [ (1,5,2,6)(3,7,4,8), (1,3)(2,4)(5,7)(6,8), (1,2)(3,4)(5,6)(7,8) ],
  [ (1,3)(2,4)(5,7)(6,8), (1,5)(2,6)(3,7)(4,8), (1,2)(3,4)(5,6)(7,8) ] ]
]]></Example>


<ManSection>
  <Func Arg="" Name="SRDegrees" />
 <Returns> All of the degrees currently stored in the <Package>SRGroups</Package> library (duplicates included).
</Returns>
 <Description>
 There are no inputs to this function.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SRDegrees();
[ 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]
]]></Example>


<ManSection>
  <Func Arg="k" Name="SRLevels" />
 <Returns> All of the levels currently stored in the <Package>SRGroups</Package> library for an input RegularRootedTreeGroupDegree, <A>deg</A>.
</Returns>
 <Description>
 Degree of regular rooted tree, <A>k</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SRLevels(2);
[ 1, 2, 3, 4 ]
]]></Example>


</Section>


<Section Label="Chapter_Functionality_Section_Package_Functions">
<Heading>Package Functions</Heading>

<ManSection>
  <Func Arg="k,n" Name="AutT" />
 <Returns> The regular rooted tree group <Math>\mathrm{Aut}(T_{k,n})</Math> as a permutation group of the <Math>k^{n}</Math> leaves of <Math>T_{k,n}</Math>.
 
</Returns>
 <Description>
 The arguments of this function are a degree <A>k</A> <Math>\in\mathbb{N}_{\ge 2}</Math> and a depth <A>n</A> <Math>\in\mathbb{N}</Math>.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> G:=AutT(2,2);
Group([ (1,2), (3,4), (1,3)(2,4) ])
gap> Size(G);
8
]]></Example>


<ManSection>
  <Func Arg="k,n,aut,i" Name="BelowAction" />
 <Returns> The restriction of <A>aut</A> to the subtree below the level 1 vertex <A>i</A>, as an element of <F>AutT(</F><A>k</A>,<A>n-1</A><F>)</F>.
 
</Returns>
 <Description>
 The arguments of this function are a degree, <A>k</A> <Math>\in\mathbb{N}_{\ge 2}</Math>, a depth, <A>n</A> <Math>\in\mathbb{N}</Math>, an element of <F>AutT(</F><A>k</A>,<A>n</A><F>)</F>, <A>aut</A>, and a level 1 vertex, <A>i</A> <Math>\in\{1,\cdots,k\}</Math>.
<P/>
 </Description>
</ManSection>


<P/>
<Example><![CDATA[
gap> BelowAction(2,2,(1,2)(3,4),2);
(1,2)
]]></Example>


</Section>


</Chapter>

